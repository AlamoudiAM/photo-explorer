version: "3.5"
services:
  photo-explorer-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: photo-explorer-backend
    volumes:
      - "~/Downloads:/media"
      - "/var/www/photo-explorer/backend:/app"
    networks:
      - photo-explorer-network
    env_file: ./backend/.env
    stdin_open: true
    tty: true
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    restart: unless-stopped
    # command: cron && python3 manage.py runserver 0.0.0.0:8000
    depends_on:
      - photo-explorer-db


  photo-explorer-video-transcode:
    build:
      context: ./transcode
      dockerfile: Dockerfile
    container_name: photo-explorer-video-transcode
    volumes:
      - "~/Downloads:/media"
      - "/var/www/photo-explorer/transcode:/app"
    networks:
      - photo-explorer-network
    environment: 
      - FLASK_APP=/app/app.py
    stdin_open: true
    tty: true
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    restart: unless-stopped
    # command: flask run


  photo-explorer-db:
    image: postgres:12
    container_name: photo-explorer-db
    ports:
      - "5432:5432"
    env_file: ./backend/.env
    volumes:
      - "backend_db:/var/lib/postgresql/data"
    restart: unless-stopped
    networks:
      - photo-explorer-network

  photo-explorer-nginx:
    image: nginx:1.19
    container_name: photo-explorer-nginx
    volumes:
      - "~/Downloads:/media"
      - "/var/www/photo-explorer/backend/code:/code"
      - "./nginx/nginx.conf:/etc/nginx/conf.d/default.conf"
    ports:
      - "80:80"
      - "443:443"
    networks:
      - photo-explorer-network
    restart: unless-stopped
    depends_on:
      - photo-explorer-backend
      
networks:
  photo-explorer-network:
    name: photo-explorer-network
    driver: bridge

volumes:
  backend_db:
